// Generated by CoffeeScript 1.3.3
(function() {
  var String_da99, k, v;

  String_da99 = {
    HEAD_WHITE_SPACE: /^[\s]+/,
    END_PERIOD: /\.$/,
    END_COLON: /\:$/,
    WHITESPACE: /[\s]+/,
    da99: {
      regexp: function(name) {
        var val;
        val = String_da99[name];
        if (!val) {
          throw new Error("RegExp, " + name + ", not found.");
        }
        return val;
      }
    },
    standardize: function() {
      return this.replace(/\t/, "  ").replace(/\r/, "");
    },
    strip: function() {
      return this.replace(/^\s+|\s+$/g, '');
    },
    is_empty: function() {
      return this.length === 0;
    },
    is_whitespace: function() {
      return this.strip().length === 0;
    },
    begins_with_whitespace: function() {
      return this.HEAD_WHITE_SPACE.test(this);
    },
    has_end_period: function() {
      return this.END_PERIOD.test(this);
    },
    has_end_colon: function() {
      return this.END_COLON.test(this);
    },
    remove_end: function(type) {
      var val;
      val = (function() {
        switch (type) {
          case ".":
          case "period":
            return this.replace(this.END_PERIOD, "");
          case ":":
          case "colon":
            return this.replace(this.END_COLON, "");
          default:
            return this.replace(new RegExp("\\" + type + "$"), "");
        }
      }).call(this);
      return val;
    },
    strip_beginning_empty_lines: function(lines) {
      var arr, line, _i, _len;
      arr = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line.englishy('strip') !== "") {
          arr.push(line);
        }
      }
      return arr;
    },
    remove_indentation: function() {
      var final, indent, indent_meta, l, lines;
      if (this.strip() === "") {
        return "";
      }
      lines = this.replace(/^\s+\n/g, "").split("\n");
      indent_meta = this.HEAD_WHITE_SPACE.exec(lines[0]);
      if (!indent_meta) {
        return lines.join("\n");
      }
      indent = new RegExp("^" + indent_meta[0]);
      final = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          l = lines[_i];
          _results.push(l.replace(indent, ""));
        }
        return _results;
      })();
      return final.join("\n");
    },
    whitespace_split: function() {
      return this.strip().split(this.da99.regexp('WHITESPACE'));
    }
  };

  for (k in String_da99) {
    v = String_da99[k];
    if (!String.prototype[k]) {
      String.prototype[k] = String_da99[k];
    }
  }

  module.exports = function(str) {
    return new String_da99(str);
  };

}).call(this);
